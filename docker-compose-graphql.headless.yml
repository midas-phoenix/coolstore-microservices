version: "3"
services:
  graphql-server:
    container_name: graphql-server
    image: "vndg/cs-graphql"
    restart: always
    environment:
      - Hosts__BasePath=/
      - Cors__Origins=http://localhost:${BACKOFFICE_PORT},http://localhost:${GRAPHQL_SVR_PORT}
      - Idp__Authority=http://${HOST_IP}:${IDP_SVR_PORT}
      - Idp__Audience=api
      - GrpcEndPoints__CatalogEndPoint=catalog-service:${CATALOG_SVC_PORT}
      - GrpcEndPoints__CartEndPoint=cart-service:${CART_SVC_PORT}
      - GrpcEndPoints__InventoryEndPoint=inventory-service:${INVENTORY_SVC_PORT}
      - GrpcEndPoints__RatingEndPoint=rating-service:${RATING_SVC_PORT}
    ports:
      - "${GRAPHQL_SVR_PORT}:${GRAPHQL_SVR_PORT}"
    expose:
      - "${GRAPHQL_SVR_PORT}"
    build:
      context: .
      dockerfile: ./src/services/graphql/Dockerfile

  openapi-service:
    container_name: openapi-service
    image: "vndg/cs-openapi"
    restart: always
    environment:
      - BASE_PATH=/
    ports:
      - "${OPENAPI_SVR_PORT}:${OPENAPI_SVR_PORT}"
    expose:
      - "${OPENAPI_SVR_PORT}"
    build:
      context: .
      dockerfile: ./src/services/open-api/Dockerfile

  idp-service:
    container_name: idp-service
    image: "vndg/cs-idp-service"
    restart: always
    environment:
      - HostSettings__BasePath=/
      - HostSettings__SpaAllowedCorsOrigin=http://localhost:${WEB_PORT}
      - HostSettings__BackOfficeAllowedCorsOrigin=http://localhost:${BACKOFFICE_PORT}
      - Hosts__Externals__CurrentUri=http://${HOST_IP}:${IDP_SVR_PORT}
    ports:
      - "${IDP_SVR_PORT}:80"
    expose:
      - "${IDP_SVR_PORT}"
    build:
      context: .
      dockerfile: ./src/services/idp/Dockerfile

  cart-service:
    container_name: cart-service
    image: "vndg/cs-cart-service"
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Idp__Authority=http://${HOST_IP}:${IDP_SVR_PORT}
      - Features__EfCore__MySqlDb__FQDN=mysqldb:${MYSQLDB_PORT}
    ports:
      - "${CART_SVC_PORT}:${CART_SVC_PORT}"
    expose:
      - "${CART_SVC_PORT}"
    build:
      context: .
      dockerfile: ./src/services/cart/Dockerfile

  inventory-service:
    container_name: inventory-service
    image: "vndg/cs-inventory-service"
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Idp__Authority=http://${HOST_IP}:${IDP_SVR_PORT}
      - Features__EfCore__MySqlDb__FQDN=mysqldb:${MYSQLDB_PORT}
    ports:
      - "${INVENTORY_SVC_PORT}:${INVENTORY_SVC_PORT}"
    expose:
      - "${INVENTORY_SVC_PORT}"
    build:
      context: .
      dockerfile: ./src/services/inventory/Dockerfile

  catalog-service:
    container_name: catalog-service
    image: "vndg/cs-catalog-service"
    restart: always
    environment:
      - NODE_ENV=development
      - MONGO_DB_URI=mongodb://mongodb/catalog
      - PORT=${CATALOG_SVC_PORT}
    ports:
      - "${CATALOG_SVC_PORT}:${CATALOG_SVC_PORT}"
    expose:
      - "${CATALOG_SVC_PORT}"
    build:
      context: ./
      dockerfile: ./src/services/catalog/Dockerfile

  rating-service:
    container_name: rating-service
    image: "vndg/cs-rating-service"
    restart: always
    environment:
      - NODE_ENV=development
      - MONGO_DB_URI=mongodb://mongodb/rating
      - PORT=${RATING_SVC_PORT}
    ports:
      - "${RATING_SVC_PORT}:${RATING_SVC_PORT}"
    expose:
      - "${RATING_SVC_PORT}"
    build:
      context: .
      dockerfile: ./src/services/rating/Dockerfile

  mongodb:
    container_name: mongodb
    image: "bitnami/mongodb"
    restart: always
    expose:
      - "${MONGODB_PORT}"
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"

  mysqldb:
    container_name: mysqldb
    image: "vndg/cs-mysqldb"
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=P@ssw0rd
    expose:
      - "${MYSQLDB_PORT}"
    ports:
      - "${MYSQLDB_PORT}:${MYSQLDB_PORT}"
    build:
      context: .
      dockerfile: ./deploys/dockers/mysqldb/Dockerfile

volumes:
  shareData:
